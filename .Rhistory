a <-"~/Documents/Coursera/R Programming/"
b <- paste(a,directory,"/",sprintf("%03d",as.numeric(id)),".csv", sep="")
data <- read.csv(b, header=TRUE, sep=",")
for(id in 1:332) {
datacomplete <- complete.cases(data)
nobs <- sum(datacomplete)
id <- id
}
completedata <- data.frame(id,nobs)
}
complete("specdata", 1)
complete <- function(directory, id=1:332) {
a <-"~/Documents/Coursera/R Programming/"
b <- paste(a,directory,"/",sprintf("%03d",as.numeric(id)),".csv", sep="")
data <- read.csv(b, header=TRUE, sep=",")
for(id in 1:332) {
datacomplete <- complete.cases(data)
nobs <- sum(datacomplete)
completedata <-data.frame(id, nobs)
id <- id
}
completedata
}
complete("specdata", 1)
pollutantmean <- function(directory, pollutant, id=1:332) {
a <-"~/Documents/Coursera/R Programming/"
b <- paste(a,directory,"/",sprintf("%03d",as.numeric(id)),".csv", sep="")
data <- read.csv(b, header=TRUE, sep=",")
pollutant <- c("sulfate", "nitrate")
names(pollutant) <- c("sulfate", "nitrate")
for(id in 1:332) {
means <- colMeans(data[, c("sulfate", "nitrate")], na.rm=TRUE)
}
if (names(pollutant)=="sulfate") {
means <- means[ ,"sulfate"]
} else {
means <- means[ , "nitrate"]
}
}
pollutantmean("specdata", "sulfate", 1)
pollutantmean <- function(directory, pollutant, id=1:332) {
a <-"~/Documents/Coursera/R Programming/"
b <- paste(a,directory,"/",sprintf("%03d",as.numeric(id)),".csv", sep="")
data <- read.csv(b, header=TRUE, sep=",")
pollutant <- c("sulfate", "nitrate")
names(pollutant) <- c("sulfate", "nitrate")
for(id in 1:332) {
means <- colMeans(data[, c("sulfate", "nitrate")], na.rm=TRUE)
}
if (names(pollutant)=="sulfate") {
means <- means["sulfate"]
} else {
means <- means["nitrate"]
}
}
pollutantmean("specdata", "sulfate", 1)
class(names(pollutant))
naems(pollutant)
names(pollutant)
quit()
z <- read.csv(text="value\n12\n1\n.\n9")
typeof(z$value)
as.numeric(z$value)
classs(z$value)
class(z$value)
df <- data.frame(x=1:3, y=c("a", "b", "c"))
str(df)
cbind(df.frame(z=3:1))
cbind(df, data.frame(z=3:1))
df <- data.frame(x=1:3)
df$y <- list(1:2, 1:3), 1:4)
df$y <- list(1:2, 1:3, 1:4)
df
df2 <- data.frame(1:2, 1:3, 1:4)
df2 <- data.frame(4:1, a:d, 1:4)
df2 <- data.frame(4:1,1:4)
df2
df$y <- data.frame(4:1,1:4)
x <- c(2.1, 4.2, 3.3, 5.4)
x[c(1,1)]
x[c(2,1)]
a <- matrix(1:9, nrow=3)
colnames(a) <- c("A", "B", "C")
a[1:2, ]
a[1, ]
a[1, 1:3]
a[2:3, 1:3]
a[c(T,F,T), c("B", "A")]
vals <- outer(1:5, 1:5, FUN="paste", sep=",")
values
vals
(vals <- outer(1:5, 1:5, FUN="paste", sep=","))
(vals <- outer(1:5, 1:5, FUN="paste", sep="."))
vals <- outer(1:5), 1:5, FUN="paste", sep=",")
vals <- outer(1:5, 1:5, FUN="paste", sep=",")
select <- matrix(ncol=2, byrow=TRUE, c(1,1,3,1,2,4))
vals[select]
?matrix
x <- outer(1:4. 1:5, FUN = "*")
x <- outer(1:4. 1:5, FUN = "*")
x <- outer(1:4. 1:5, FUN = "*", sep=",")
x <- outer(1:4, 1:5, FUN = "*", sep=",")
df <- data.frame(x=1:3, y=3:1, z=letters[1:3])
df
dr[c(1,2), 2]
df[c(1,2), 2]
str(df)
x <- c(a=1, b=1)
x[1]
x[[1]]
x[[b]]
x[[2]]
y <- list(a=1, b=2)
str(y[1])
y[[1]]
str(y)
z <- factor(c("a", "b"))
z
z[1]
z[1, drop=T]
z[1, drop=F]
a <- matrix(1:4, nrow=2)
a
x <- 1:5
x
x[c(1,2)]
x[c(1,2)] <- 2:3
x
x[-1] <- 4:1
x[-1]
x[c(1,1)]
x <- 1:5
x[c(1,1)]
x <- c("m", "f", "u","f", "f", "m", "m")
lookup <- c(m)
lookup <- c(m= "Male", f="Female", u=NA)
lookup[x]
grades <- c(1,2,2,3,1)
infor <- data.frame( gra)
grades <- c(1,2,2,3,1)
infro < data.frame(
grade = 3:1,
desc = c("Excellent", "Good", "Poor"),
fail = c(F,F,T)
)
grades <- c(1,2,2,3,1)
info < data.frame(
grade = 3:1,
desc = c("Excellent", "Good", "Poor"),
fail = c(F,F,T)
)
grades <- c(1,2,2,3,1)
info <- data.frame(
grade = 3:1,
desc = c("Excellent", "Good", "Poor"),
fail = c(F,F,T)
)
grades
id <- match(grades, info$grade)
info[id,]
df <- data.frame(x=rep(1:3, each =2), y =6:1, z = letters[1:6])
df
sample(nrow(df))
sample(nrow(df))
df[sample(nrow(df)),  ]
df[sample(nrow(df)),  ]
df[sample(nrow(df)),  ]
df[sample(nrow(df), 10, rep=T), ]
log(-1)
printmessage <- function(x) {
if(x>0)
print("x is greater than zero"
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage <- function(x) {
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(x)
printmessage(1)
printmessage(NA)
printmessage2 <- function(x) {
if(is.na(x))
print("x is a missing value")
else if(x>0
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage2 <- function(x) {
if(is.na(x))
print("x is a missing value")
else if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
x <- log(-1)
printmessage2(x)
traceback
debug
df <- data.frame(x=c(2,4,1), y=(9,11,6), n=c(3,5,1))
df <- data.frame(x=c(2,4,1), y=c(9,11,6), n=c(3,5,1))
rep(1:nrow(df), df$n)
df
df$n
>nrow
?nrow
df[rep(1:nrwo(df), df$n, )]
df[rep(1:nrow(df), df$n, )]
df[rep(1:nrow(df), df$n, ]
rep(1:nrow(df), df$n)
df[rep(1:nrow(df), df$n, ]
df[rep(1:nrow(df), df$n), ]
df <- data.frame(x=1:3, y=3:1, z=letters[1:3])
df$z <- NULL
df
y <- 10
f1 <- function(x) {
function() {
x+10
}
}
f1(1)()
str(str)
str(lm)
str(ls)
x <- rnorm(100, 2,4)
summary(x)
str(x)
x <- rnorm(100, 2, 4)
summary(x)
f <- gl(40, 10)
summary(f)
str(f)
library(datasets)
head(airquality)
str(airquality)
m <- matrix(rnorm(100), 10, 10)
str(m)
m[,1]
x <- rnorm(10)
x
x <- rnorm(10, 20, 2)
x
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rpois(10, 1)
rpois(10, 2)
rpois(10, 20)
ppois(2,2)
ppois(4,2)
ppois(6,2)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
plot
plot(x,y)
set.seed(10)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3*x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y)
sample(1:10, 4)
sample(1:10, replace=TRUE)
system.time({
n <- 1000
r <- numeric(n)
for (i in 1:n) {
x <- rnorm(n)
r[i] <- mean(x)
}
})
f <- function (x, n) {
n <- 1000
r <- numeric(n)
for (i in 1:n) {
x <- rnorm(n)
r[i] <- mean(x)
}
}
f <- function (n) {
n <- 1000
r <- numeric(n)
for (i in 1:n) {
x <- rnorm(n)
r[i] <- mean(x)
}
}
f(100)
f
f <- function (n) {
n <- 1000
r <- numeric(n)
for (i in 1:n) {
x <- rnorm(n)
r[i] <- mean(x)
}
return(r)
}
f(100)
f(10)
f <- function() {
x <- 1
y <- 2
c(x,y)
}
f()
rm(f)
f
x <- 2
g <- function() {
y <- 1
c(x,y)
}
g()
rm(x,g)
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x,y,z)
}
i()
}
h()
rm(x,h)
j <- function(x) {
y <- 2
function() {
c(x,y)
}
}
k <- j(1)
k()
rm(j,k)
n <- function(x) x/2
o <- function() {
n <- 10
n(n)
}
o()
n(10)
n(5)
n(20)
o(30)
n(30)
j <- function() {
if(!exists("a")) {
a<- 1
} else {
a <- a+1
}
print(a)
}
j()
j()
str(j)
c <- 10
c(c=c)
f <- function(x) {
f <- function(x) {
f <- function(x) {
x^2
}
f(x) + 1
}
f(x) *2
}
f(10)
sapply(1:5, `+`, 3)
sapply(1:5, "+", 3)
x <- list(1:3, 4:9, 10:12)
x
sapply(x, "[", 2)
mean(1:10)
mean(1:10, trim = 0.5)
mean(1:10, trim = 0.05)
?ls
!is.null(a) || stop("a is null")
sum(1,2, NA, na.rm=TRUE)
f <- function(x) {}
f <- function(x) {
x$a <- 2
x
}
x <- list(a=1)
f(x)
x%a
x$a
c = rbind(c(1, -1/4), c(-1/4, 1))
class(c)
solve(c)
solve(c)%*%c
quit()
j <- function(x) {}
j <- function(x) {
y <- 2
function() {
c(x,y)
}
}
j <- j(1)
k <- j
k()
rm(j,k)
replicate(100, (1+2))
`(` <- function(e1) {
if(is.numeric(e1) && runif(1) <0.1) {
e1 + 1
} else {
e1
}
}
replicate(100, (1+2))
rm("(")
f <- function(x) {
f <- function(x) {
f <- function(x) {
x^2
}
f(x) + 1
}
f(x) * 2
}
f(10)
?<<-
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cacheSolve <- function(x=matrix(), ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
makeCacheMatrix(x=matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(x=matrix(c(1,2,3,4), nrow=2, ncol=2))
str(makeCacheMatrix)
class(makeCacheMatrix)
